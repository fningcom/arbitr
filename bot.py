import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import sqlite3
import threading
import time

TOKEN = "7900071646:AAHIi93du6_RfCzGIjE02FlZyE1XZ0VGBK8"  # –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton("üìä –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"))
    return markup

# –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
def settings_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üë• –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏"), KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ"))
    markup.add(KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å"), KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return markup

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
def connect_db():
    return sqlite3.connect("parser.db")

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
def add_participant(participant_number):
    conn = connect_db()
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO participants (participant_number) VALUES (?)", (participant_number,))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    finally:
        conn.close()

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
def delete_participant(participant_number):
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM participants WHERE participant_number = ?", (participant_number,))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
def get_all_participants():
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT participant_number FROM participants")
    participants = [row[0] for row in cursor.fetchall()]
    conn.close()
    return participants

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
@bot.message_handler(func=lambda message: message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
def settings(message):
    bot.send_message(message.chat.id, "üîß –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=settings_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏"
@bot.message_handler(func=lambda message: message.text == "üë• –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏")
def show_participants(message):
    participants = get_all_participants()
    if participants:
        bot.send_message(message.chat.id, "üìå –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n" + "\n".join(participants))
    else:
        bot.send_message(message.chat.id, "üö´ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Å—Ç.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ"
@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ")
def request_new_participant(message):
    bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    bot.register_next_step_handler(message, add_new_participant)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
def add_new_participant(message):
    if add_participant(message.text):
        bot.send_message(message.chat.id, f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ {message.text} –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –£—á–∞—Å—Ç–Ω–∏–∫ {message.text} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å"
@bot.message_handler(func=lambda message: message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å")
def request_delete_participant(message):
    bot.send_message(message.chat.id, "üóë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —É–¥–∞–ª–µ–Ω–∏—è
    bot.register_next_step_handler(message, remove_participant)

# –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
def remove_participant(message):
    delete_participant(message.text)
    bot.send_message(message.chat.id, f"‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ {message.text} —É–¥–∞–ª–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@bot.message_handler(func=lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def back_to_main(message):
    bot.send_message(message.chat.id, "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
@bot.message_handler(func=lambda message: message.text == "üìä –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥")
def start_parsing_handler(message):
    participants = get_all_participants()
    if not participants:
        bot.send_message(message.chat.id, "üö´ –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.")
        bot.send_message(message.chat.id, "‚ùóÔ∏è –î–æ–±–∞–≤—å—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞.")
        return

    bot.send_message(message.chat.id, "‚è≥ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω...")

    # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread = threading.Thread(target=run_parsing, args=(message.chat.id, participants))
    thread.start()

def start_parsing():
    pass

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
def run_parsing(chat_id, participants):
    for participant in participants:
        data = start_parsing(participant)  # –í—ã–∑—ã–≤–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        save_parsing_result(participant, data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        time.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è API

    bot.send_message(chat_id, "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –ë–î
def save_parsing_result(participant_number, case_data):
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO cases (participant_number, case_data) VALUES (?, ?)", (participant_number, case_data))
    conn.commit()
    conn.close()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
